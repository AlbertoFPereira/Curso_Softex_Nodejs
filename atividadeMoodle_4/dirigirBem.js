/*üöó 5. Dirigir Bem ‚Äì Escola de Dire√ß√£o

Enunciado:

Uma escola de dire√ß√£o deseja criar um sistema para acompanhar a evolu√ß√£o dos alunos nas aulas pr√°ticas.

1 - Cada aluno deve ter nome, n√≠vel de habilidade (iniciante, intermedi√°rio, avan√ßado) e quantidade de aulas realizadas.

2 - O instrutor pode registrar a conclus√£o de uma aula, aumentando o n√≠vel de habilidade do aluno ap√≥s determinado n√∫mero de pr√°ticas.

O sistema deve mostrar o progresso do aluno e indicar se ele est√° apto para o exame pr√°tico.

Implemente em JavaScript uma aplica√ß√£o orientada a objetos que simule esse processo. */




const prompt = require('prompt-sync')({ sigint: true }); // chamar a biblioteca



// Valida se o nome n√£o √© num√©rico e n√£o est√° vazio evitando n√∫meros no nome do aluno
function lerNome() {
  while (true) {
    const nome = prompt('Digite o nome do aluno: ').trim();
    // isNaN(nome) retorna true se n√£o for um n√∫mero
    if (nome && isNaN(nome)) {
      return nome;
    }
    console.log('Nome Inv√°lido! Tente novamente.');
  }
}

// Valida se a quantidade de aulas √© um n√∫mero v√°lido, e n√£o um nome
function lerQuantidadeAulas() {
  while (true) {
    const entrada = prompt('Digite a quantidade de aulas realizadas: ').trim();
    const numero = Number(entrada);

    // Verifica se √© n√∫mero e se n√£o √© NaN e √© >= 0
    if (!isNaN(numero) && numero >= 0) {
      return numero;
    }
    console.log('Quantidade Inv√°lida! Tente novamente.');
  }
}

// ===== Coleta de dados com valida√ß√£o =====
let nome = lerNome();
let quantAula = lerQuantidadeAulas();

// Cria√ß√£o da classe do aluno
class Aluno {
  constructor(nome, aulas) {
    this.nome = nome;
    this.aulas = aulas;
    this.nivel = this.definirNivel();
  }

  //Definir o n√≠vel de habilidade do aluno (iniciante, intermedi√°rio, avan√ßado) com base na de aulas realizadas
  definirNivel() {
    if (this.aulas < 10) return 'iniciante';
    else if (this.aulas < 20 && this.aulas >= 10) return 'intermedi√°rio';
    else return 'avan√ßado';
  }

  //Armazenar o progresso do aluno para exibi√ß√£o das informa√ß√µes ao final da colata de dados
  progresso() {
    const apto = this.nivel === 'avan√ßado';
    return {
      nome: this.nome,
      aulas: this.aulas,
      nivel: this.nivel,
      aptoParaExame: apto
    };
  }
}

// ===== Cria√ß√£o do aluno e exibi√ß√£o =====
const aluno1 = new Aluno(nome, quantAula);

console.log('\n=== Progresso do Aluno ===');
console.log(`Nome: ${aluno1.nome}`);
console.log(`Aulas realizadas: ${aluno1.aulas}`);
console.log(`N√≠vel: ${aluno1.nivel}`);
console.log(`Apto para exame pr√°tico: ${aluno1.progresso().aptoParaExame ? 'Sim' : 'N√£o'}`);